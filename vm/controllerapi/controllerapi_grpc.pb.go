// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: controllerapi/controllerapi.proto

package controllerapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControllerApi_Watch_FullMethodName = "/controllerapi.ControllerApi/Watch"
	ControllerApi_List_FullMethodName  = "/controllerapi.ControllerApi/List"
	ControllerApi_Patch_FullMethodName = "/controllerapi.ControllerApi/Patch"
)

// ControllerApiClient is the client API for ControllerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerApiClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
}

type controllerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerApiClient(cc grpc.ClientConnInterface) ControllerApiClient {
	return &controllerApiClient{cc}
}

func (c *controllerApiClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControllerApi_ServiceDesc.Streams[0], ControllerApi_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequest, WatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControllerApi_WatchClient = grpc.ServerStreamingClient[WatchResponse]

func (c *controllerApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ControllerApi_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerApiClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchResponse)
	err := c.cc.Invoke(ctx, ControllerApi_Patch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerApiServer is the server API for ControllerApi service.
// All implementations must embed UnimplementedControllerApiServer
// for forward compatibility.
type ControllerApiServer interface {
	Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error
	List(context.Context, *ListRequest) (*ListResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	mustEmbedUnimplementedControllerApiServer()
}

// UnimplementedControllerApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControllerApiServer struct{}

func (UnimplementedControllerApiServer) Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedControllerApiServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedControllerApiServer) Patch(context.Context, *PatchRequest) (*PatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedControllerApiServer) mustEmbedUnimplementedControllerApiServer() {}
func (UnimplementedControllerApiServer) testEmbeddedByValue()                       {}

// UnsafeControllerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerApiServer will
// result in compilation errors.
type UnsafeControllerApiServer interface {
	mustEmbedUnimplementedControllerApiServer()
}

func RegisterControllerApiServer(s grpc.ServiceRegistrar, srv ControllerApiServer) {
	// If the following call pancis, it indicates UnimplementedControllerApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControllerApi_ServiceDesc, srv)
}

func _ControllerApi_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerApiServer).Watch(m, &grpc.GenericServerStream[WatchRequest, WatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControllerApi_WatchServer = grpc.ServerStreamingServer[WatchResponse]

func _ControllerApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerApi_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerApi_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerApiServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerApi_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerApiServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerApi_ServiceDesc is the grpc.ServiceDesc for ControllerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controllerapi.ControllerApi",
	HandlerType: (*ControllerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ControllerApi_List_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _ControllerApi_Patch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ControllerApi_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controllerapi/controllerapi.proto",
}
