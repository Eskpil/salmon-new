// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: nodeapi/nodeapi.proto

package nodeapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeApi_Ping_FullMethodName               = "/nodeapi.NodeApi/Ping"
	NodeApi_CreateVolume_FullMethodName       = "/nodeapi.NodeApi/CreateVolume"
	NodeApi_AttachDisk_FullMethodName         = "/nodeapi.NodeApi/AttachDisk"
	NodeApi_AttachInterface_FullMethodName    = "/nodeapi.NodeApi/AttachInterface"
	NodeApi_ListMachines_FullMethodName       = "/nodeapi.NodeApi/ListMachines"
	NodeApi_ListStoragePools_FullMethodName   = "/nodeapi.NodeApi/ListStoragePools"
	NodeApi_ListStorageVolumes_FullMethodName = "/nodeapi.NodeApi/ListStorageVolumes"
	NodeApi_ListNetworks_FullMethodName       = "/nodeapi.NodeApi/ListNetworks"
)

// NodeApiClient is the client API for NodeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeApiClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	AttachDisk(ctx context.Context, in *AttachDiskRequest, opts ...grpc.CallOption) (*AttachDiskResponse, error)
	AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*MachineList, error)
	ListStoragePools(ctx context.Context, in *ListStoragePoolsRequest, opts ...grpc.CallOption) (*StoragePoolList, error)
	ListStorageVolumes(ctx context.Context, in *ListStorageVolumesRequest, opts ...grpc.CallOption) (*StorageVolumeList, error)
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*NetworkList, error)
}

type nodeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeApiClient(cc grpc.ClientConnInterface) NodeApiClient {
	return &nodeApiClient{cc}
}

func (c *nodeApiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, NodeApi_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVolumeResponse)
	err := c.cc.Invoke(ctx, NodeApi_CreateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) AttachDisk(ctx context.Context, in *AttachDiskRequest, opts ...grpc.CallOption) (*AttachDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachDiskResponse)
	err := c.cc.Invoke(ctx, NodeApi_AttachDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachInterfaceResponse)
	err := c.cc.Invoke(ctx, NodeApi_AttachInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*MachineList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineList)
	err := c.cc.Invoke(ctx, NodeApi_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) ListStoragePools(ctx context.Context, in *ListStoragePoolsRequest, opts ...grpc.CallOption) (*StoragePoolList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoragePoolList)
	err := c.cc.Invoke(ctx, NodeApi_ListStoragePools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) ListStorageVolumes(ctx context.Context, in *ListStorageVolumesRequest, opts ...grpc.CallOption) (*StorageVolumeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageVolumeList)
	err := c.cc.Invoke(ctx, NodeApi_ListStorageVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeApiClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*NetworkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkList)
	err := c.cc.Invoke(ctx, NodeApi_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeApiServer is the server API for NodeApi service.
// All implementations must embed UnimplementedNodeApiServer
// for forward compatibility.
type NodeApiServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	AttachDisk(context.Context, *AttachDiskRequest) (*AttachDiskResponse, error)
	AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*MachineList, error)
	ListStoragePools(context.Context, *ListStoragePoolsRequest) (*StoragePoolList, error)
	ListStorageVolumes(context.Context, *ListStorageVolumesRequest) (*StorageVolumeList, error)
	ListNetworks(context.Context, *ListNetworksRequest) (*NetworkList, error)
	mustEmbedUnimplementedNodeApiServer()
}

// UnimplementedNodeApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeApiServer struct{}

func (UnimplementedNodeApiServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNodeApiServer) CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedNodeApiServer) AttachDisk(context.Context, *AttachDiskRequest) (*AttachDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachDisk not implemented")
}
func (UnimplementedNodeApiServer) AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachInterface not implemented")
}
func (UnimplementedNodeApiServer) ListMachines(context.Context, *ListMachinesRequest) (*MachineList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedNodeApiServer) ListStoragePools(context.Context, *ListStoragePoolsRequest) (*StoragePoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoragePools not implemented")
}
func (UnimplementedNodeApiServer) ListStorageVolumes(context.Context, *ListStorageVolumesRequest) (*StorageVolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageVolumes not implemented")
}
func (UnimplementedNodeApiServer) ListNetworks(context.Context, *ListNetworksRequest) (*NetworkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedNodeApiServer) mustEmbedUnimplementedNodeApiServer() {}
func (UnimplementedNodeApiServer) testEmbeddedByValue()                 {}

// UnsafeNodeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeApiServer will
// result in compilation errors.
type UnsafeNodeApiServer interface {
	mustEmbedUnimplementedNodeApiServer()
}

func RegisterNodeApiServer(s grpc.ServiceRegistrar, srv NodeApiServer) {
	// If the following call pancis, it indicates UnimplementedNodeApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeApi_ServiceDesc, srv)
}

func _NodeApi_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_AttachDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).AttachDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_AttachDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).AttachDisk(ctx, req.(*AttachDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_AttachInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).AttachInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_AttachInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).AttachInterface(ctx, req.(*AttachInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_ListStoragePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoragePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).ListStoragePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_ListStoragePools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).ListStoragePools(ctx, req.(*ListStoragePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_ListStorageVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).ListStorageVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_ListStorageVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).ListStorageVolumes(ctx, req.(*ListStorageVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeApi_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeApiServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeApi_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeApiServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeApi_ServiceDesc is the grpc.ServiceDesc for NodeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeapi.NodeApi",
	HandlerType: (*NodeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NodeApi_Ping_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _NodeApi_CreateVolume_Handler,
		},
		{
			MethodName: "AttachDisk",
			Handler:    _NodeApi_AttachDisk_Handler,
		},
		{
			MethodName: "AttachInterface",
			Handler:    _NodeApi_AttachInterface_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _NodeApi_ListMachines_Handler,
		},
		{
			MethodName: "ListStoragePools",
			Handler:    _NodeApi_ListStoragePools_Handler,
		},
		{
			MethodName: "ListStorageVolumes",
			Handler:    _NodeApi_ListStorageVolumes_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _NodeApi_ListNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeapi/nodeapi.proto",
}
